use case_study1;
select * from fact
select * from location
select * from product


1. select count(distinct(state)) as state_count from location
2. select count(type) as regular_type from product where Type ='Regular'

3. SELECT sum(marketing) as total_marketing from fact where productid = 1

4. select min(sales) as min_sales from fact
5. select max(COGS) as max_cogs from fact

--6. Display the details of the product where product type is coffee
  select * from product where product_type = 'coffee'

  --7. Display the details where total expenses are greater than 40
   select * from fact 
   where total_expenses > 40 
   order by productid

  -- 8. What is the average sales in area code 719?
   select avg(sales) as avg_sales 
   from fact 
   where area_code=719

   --9. Find out the total profit generated by Colorado state.
    select sum(f.profit) as col_profit from fact f
	inner join location l 
	on f.area_code = l.area_code
	where l.state = 'colorado'
   
   --10. Display the average inventory for each product ID.
    select productid, avg(inventory) as avg_inventory 
	from fact
	group by productid
	order by productid
    
  --11. Display state in a sequential order in a Location Table.
    select * from fact
	select * from location
	select * from product
	
	select distinct(state) from location 
	order by state

  --12. Display the average budget of the Product where the average budget margin should be greater than 100.
						/* having clause is used to apply condition on aggregate function*/
   select avg(budget_margin) as avg_budget, productid 
   from fact 
   group by productid
   having avg(budget_margin) > 100

   --13. What is the total sales done on date 2010-01-01?
   select sum(sales) as sale_on_date from fact where date = '2010-01-01'

   --14. Display the average total expense of each product ID on an individual date
    SELECT productid, date, avg(total_expenses) as t_ex
	from fact
	group by productid, date

  --15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
   select f.date, f.productid,p.product_type, p.product, f.sales, f.profit, l.state, l.area_code
   from fact f
   inner join product p
   on f.productid = p.productid
   inner join location l
   on f.area_code = l.area_code

   --16. Display the rank without any gap to show the sales wise rank.
   select sales, dense_rank() over (order by sales) as ranking 
   from fact
   group by sales

   --17. Find the state wise profit and sales
   select sum(f.profit) as state_profit, sum(f.sales) as state_sales, l.state
   from fact f
   inner join location l
   on l.area_code = f.area_code
   group by l.state
   
   --18. Find the state wise profit and sales along with the productname
   select p.product, sum(f.profit) as state_profit, sum(f.sales) as state_sales,  l.state
   from fact f
   join location l
   on f.area_code = l.area_code
   join product p
   on f.productid = p.productid
   group by l.state, p.product

  --19. If there is an increase in sales of 5%, calculate the increasedsales.
   select productid, sales, sales*1.05 as increased_sales 
   from fact

   --20. Find the maximum profit along with the product ID and producttype.
    select f.productid, p.product_type, f.profit
	from fact f
	join product p
	on p.productid = f.productid
	where f.profit = (select max(profit) from fact)

	--21. Create a stored procedure to fetch the result according to the product typefrom Product Table.
	create proc usp_pro_type
	@type varchar(10)
	as
	(
	select * from product where product_type = @type
	);
	usp_pro_type 'coffee'
	usp_pro_type 'tea'

	--22. Write a query by creating a condition in which if the total expenses is lessthan60 then it is a profit or else loss.
	  select total_expenses, IIF(total_expenses <60, 'Profit',' Loss') as pro_los from fact

	--23. Give the total weekly sales value with the date and product IDdetails. Useroll-up to pull the data in hierarchical order.
	 select date, productid, sum(sales) from fact
	 group by date, productid with rollup

	 --24. Apply union and intersection operator on the tables which consist of attribute area code.
	  select area_code from fact
	  union
	  select area_code from location

	  select area_code from fact
	  intersect
	  select area_code from location
	  
	  --25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.
	 




	  select * from fact
	select * from location
	select * from product

	--26. Change the product type from coffee to tea where product IDis 1 andundoit.
	begin transaction
	update product
	set product_type ='coffee' where productid = 1
	rollback transaction

	--27. Display the date, product ID and sales where total expenses are between 100 to 200.
	select date, productid, sales, total_expenses from fact
	where total_expenses between 100 and 200

	--28. Delete the records in the Product Table for regular type.
     begin transaction
	 delete from product where type ='Regular'
	 rollback transaction

	 --29. Display the ASCII value of the fifth character from the columnProduct.
	 select product , ASCII(SUBSTRING(product,5,1)) AS TH_CHAR FROM PRODUCT